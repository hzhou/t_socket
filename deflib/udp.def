subcode: _autoload
    $include sys/types
    $include sys/socket

    $include arpa/inet

    $register_prefix(socket) int

#---------------------------------------- 
subcode: init_udp_socket(s, port)
    $(s) = socket(AF_INET, SOCK_DGRAM, 0)
    $if $(s)<0
        $call die, "init_udp_socket: socket failed"

    $my struct sockaddr_in t_addr
    $my int t_addr_len=sizeof(struct sockaddr_in)
    $(set:bind_addr=(struct sockaddr *)&t_addr, t_addr_len)

    $(if:port!=0)
        $call _sockaddr_set, t_addr, INADDR_ANY, $(port)
        $if bind($(s), $(bind_addr)) <0
            $call die, "init_udp_socket: bind failed"

#-- examples
subcode: init_udp_client
    $call init_udp_socket, socket_out, 0

subcode: init_udp_server(port)
    $call init_udp_socket, socket_in, $(port)

subcode: set_server_addr(host, ip)

#---------------------------------------- 
subcode: _sockaddr_set(addr, host, port)
    memset(&$(addr), 0, sizeof($(addr)))
    $(addr).sin_family = AF_INET
    $(addr).sin_port = htons($(port))

    $(if:host=INADDR_ANY)
        $(addr).sin_addr.s_addr = htonl(INADDR_ANY)
    $(elif:host~\d+\.\d+\.\d+\.\d+)
        $(split:\.:host)
        $temp unsigned char* s
        $(s)=(unsigned char*)&$(addr).sin_addr.s_addr
        $(s)[0]=$(p_1)
        $(s)[1]=$(p_2)
        $(s)[2]=$(p_3)
        $(s)[3]=$(p_4)
    $(else)
        $my struct hostent * hp
        hp = gethostbyname($(host))
        $if !hp
            $call die, "gethostbyname failed"
        memcpy(&$(addr).sin_addr, hp->h_addr_list[0], hp->length)
        # todo

#---------------------------------------- 
subcode: udp_listen_loop
    $while 1
        $(set:N=1024)
        $my s_buf[$(N)]

        $(set:in_addr=(struct sockaddr *)&t_addr, (socklen_t*)&t_addr_len)
        tn_len = recvfrom(socket_in, s_buf, $(N), 0, $(in_addr))
        $if tn_len>0
            s_buf[tn_len]=0
            puts(s_buf)

